<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Python on Agus site</title><link>https://plaguss.github.io/tags/python/</link><description>Recent content in Python on Agus site</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 09 Apr 2023 20:38:54 +0100</lastBuildDate><atom:link href="https://plaguss.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Pytokei, calling rust's tokei from python</title><link>https://plaguss.github.io/blog/my-attempt-of-calling-rust-from-python/</link><pubDate>Sun, 09 Apr 2023 20:38:54 +0100</pubDate><guid>https://plaguss.github.io/blog/my-attempt-of-calling-rust-from-python/</guid><description>In this blog post I will walk through the steps I followed to start with rust, what resulted in pytokei, a python wrapper of tokei.
❯ pytokei pytokei pytokei ┏━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━┳━━━━━━━━━━┳━━━━━━━━┓ ┃ language ┃ Files ┃ Lines ┃ Code ┃ Comments ┃ Blanks ┃ ┡━━━━━━━━━━━━╇━━━━━━━╇━━━━━━━╇━━━━━━╇━━━━━━━━━━╇━━━━━━━━┩ │ Rust │ 9 │ 1011 │ 846 │ 49 │ 116 │ │ Python │ 5 │ 568 │ 436 │ 13 │ 119 │ │ Markdown │ 11 │ 423 │ 123 │ 179 │ 121 │ │ Plain Text │ 4 │ 133 │ 0 │ 133 │ 0 │ │ TOML │ 3 │ 75 │ 59 │ 6 │ 10 │ │ YAML │ 1 │ 69 │ 63 │ 0 │ 6 │ │ Makefile │ 1 │ 26 │ 18 │ 0 │ 8 │ │ Dockerfile │ 1 │ 16 │ 7 │ 3 │ 6 │ │ Shell │ 3 │ 12 │ 12 │ 0 │ 0 │ │ Autoconf │ 3 │ 7 │ 7 │ 0 │ 0 │ └────────────┴───────┴───────┴──────┴──────────┴────────┘ Intro After reading Rust&amp;rsquo;s book, I was looking for a excuse to build something in Rust.</description></item><item><title>A NER Model for Command Line Help Messages (Part 2: spaCy projects to the rescue)</title><link>https://plaguss.github.io/blog/a-ner-model-for-command-line-help-messages-part2/</link><pubDate>Tue, 14 Mar 2023 21:01:11 +0100</pubDate><guid>https://plaguss.github.io/blog/a-ner-model-for-command-line-help-messages-part2/</guid><description>Lets continue our journey with helpner-core, the spaCy project that does all the magic behind helpner.
This repository contains a spaCy template for a NER model, and allows to build the end-to-end spaCy workflow from the spacy project cli command manager. In short, spaCy projects present End-to-end NLP workflows from prototype to production.
We will visit the different steps of the whole workflow following the commands that involve the pipeline.</description></item><item><title>A NER Model for Command Line Help Messages (Part 1: The command line program)</title><link>https://plaguss.github.io/blog/a-ner-model-for-command-line-help-messages-part1/</link><pubDate>Tue, 21 Feb 2023 18:55:27 +0100</pubDate><guid>https://plaguss.github.io/blog/a-ner-model-for-command-line-help-messages-part1/</guid><description>In this 3 part series I will tell the journey of creating a program to detect the different components/entities of a command line program&amp;rsquo;s help message. This post will start by looking at the final product helpner, a python program that can be installed from PyPI, the second will tell about the spaCy NLP workflow and finally we will take a look at the data that feeds spaCy&amp;rsquo;s final model.</description></item></channel></rss>